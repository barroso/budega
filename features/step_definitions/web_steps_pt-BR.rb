# encoding: utf-8
# IMPORTANT: This file is generated by cucumber-rails - edit at your own peril.
# It is recommended to regenerate this file in the future when you upgrade to a 
# newer version of cucumber-rails. Consider adding your own code to a new file 
# instead of editing this one. Cucumber will automatically load all features/**/*.rb
# files.

require File.expand_path(File.join(File.dirname(__FILE__), "..", "support", "paths"))

Dado /^que eu esteja logado$/ do
  unless page.has_selector?('#saudacao')
    # Evita problema quando o firefox eh instanciado com a janela menor do que o necessario
    page.execute_script("window.resizeTo(screen.width, screen.height);window.moveTo(0,0);window.focus()")
    Dado %{que eu esteja na pagina de login}
    E %{eu preencho "usuarioLogin" com "admin"}
    E %{eu preencho "uruarioPassword" com "1234"}
    E %{eu clico em "Entrar"}
    Então %{eu devo ver "Bem vindo"}
  end
end

Quando /^eu acesso o menu "([^"]*)"$/ do |menu|
  link = find(:xpath, "//a[contains(text(), '#{menu}')]")
  page.execute_script("window.location = '#{link[:href]}'")
end

Quando /^eu clico no botão "([^"]*)"$/ do |label|
  botao = find(:xpath, "//a[contains(text(), '#{label}')]")
  page.execute_script("window.location = '#{botao[:href]}'")
end

Quando /^eu clico no salvar/ do
  find(:xpath, "//button[contains(text(), 'Salvar')]").click
end

Quando /^eu seleciono "([^"]*)" de "([^"]*)"$/ do |value, field|
  field = get_field(field)
  When %{I select "#{value}" from "#{field}"}
end

Dado /^que exista o setor "([^"]*)"$/ do |nome_setor|
   insert :setor do
     nome nome_setor
   end
end





Quando /^eu acesso "([^"]*)"$/ do |path|
  page.execute_script("window.location = 'http://localhost/cucumber'")
end

Quando /^eu clico em "Entrar"?$/ do
    find('#logar').click
end

Quando /^eu clico em excluir "([^"]*)"$/ do |text|
  find(:xpath, "//td[contains(text(), '#{text}')]/../td/a/img[@title='Excluir']").click
  #find(:xpath, "//td[text()='#{text}']/../td")
end

Quando /^eu clico em editar "([^"]*)"$/ do |text|
  find(:xpath, "//td[contains(text(), '#{text}')]/../td/a/img[@title='Editar']").click
end

Quando /^eu clico na linha "([^"]*)" da imagem "([^"]*)"$/ do |desc, img|
  find(:xpath, "//td[contains(text(), '#{desc}')]/../td/a/img[@title='#{img}']").click
end

Quando /^eu clico na imagem "([^"]*)" da pergunta "([^"]*)"$/ do |img, titulo|
  find(:xpath, "//p[contains(text(), '#{titulo}')]/../div[@class='acaoPerguntas']/a/img[@title='#{img}']").click
end

Quando /^eu clico na imagem com o título "([^"]*)"$/ do |titulo|
  find(:xpath, "//img[@title='#{titulo}']").click
end

Quando /^eu preencho o campo do item "([^"]*)" com "([^"]*)"$/ do |desc, value|
  field = find(:xpath, "//td[contains(text(), '#{desc}')]/../td/input[@type='text']")
  field.set(value)
end

Quando /^eu clico no botão com o texto "([^"]*)"$/ do |label|
  find(:xpath, "//button/descendant::*[contains(text(), '#{label}')]").click
end

def get_field_input field
  label = (all(:xpath, "//input[contains(class(), 'despesa moeda')]"))[0]
  field = label[:for] unless label.nil?
  field
end

Quando /^eu clico no ícone com o título "([^"]*)"$/ do |titulo|
  find(:xpath, "//a[@title='#{titulo}']").click
end

Então /^eu devo ver o título "([^"]*)"$/ do |text|
  Then %{I should see "#{text}" within "#waDivTitulo"}
end

Dado /^que eu esteja na (.+)$/ do |page_name|
  Given %{I am on #{page_name}}
end

Quando /^eu vou para (.+)$/ do |page_name|
  When %{I go to #{page_name}}
end

Quando /^eu aperto "([^"]*)"$/ do |button|
  When %{I press "#{button}"}
end

Quando /^eu clico "([^"]*)"$/ do |link|
  When %{I follow "#{link}"}
end

Quando /^eu clico "([^"]*)" dentro de "([^"]*)"$/ do |link, parent|
  When %{I follow "#{link}" within "#{parent}"}
end

Quando /^eu preencho "([^"]*)" com "([^"]*)"$/ do |field, value|
  field = get_field(field)
  When %{I fill in "#{field}" with "#{value}"}
end

Quando /^eu preencho o campo \(JS\) "([^"]*)" com "([^"]*)"$/ do |field, value|
  field = get_field(field)
  page.execute_script("$('##{field}').val('#{value}')")
end

Quando /^eu preencho o select autocomplete \(JS\) "([^"]*)" com "([^"]*)"$/ do |field, value|
  find(:xpath, "//button[@type='button']").click
  field = get_field(field)
  page.execute_script("$('.#{field}').val('#{value}').blur()")
end

Quando /^eu preencho "([^"]*)" para "([^"]*)"$/ do |value, field|
  When %{I fill in "#{value}" for "#{field}"}
end

Quando /^eu preencho o seguinte:$/ do |fields|
  When %{I fill in the following:}, fields
end

Quando /^eu seleciono "([^"]*)" como a data e a hora$/ do |time|
  When %{I select "#{time}" as the date and time}
end

Quando /^eu seleciono "([^"]*)" como a data e a hora "([^"]*)"$/ do |datetime, datetime_label|
  When %{I select "#{datetime}" as the "#{datetime_label}" date and time}
end

Quando /^eu seleciono "([^"]*)" como a hora$/ do |time|
  When %{I select "#{time}" as the time}
end

Quando /^eu seleciono "([^"]*)" como a hora "([^"]*)"$/ do |time, time_label|
  When %{I select "#{time}" as the "#{time_label}" time}
end

Quando /^eu seleciono "([^"]*)" como a data$/ do |date|
  When %{I select "#{date}" as the date}
end

Quando /^eu seleciono "([^"]*)" como a data "([^"]*)"$/ do |date, date_label|
  When %{I select "#{date}" as the "#{date_label}" date}
end

Quando /^eu seleciono "([^"]*)" como "([^"]*)"$/ do |date, date_label|
  When %{I select "#{date}" as the "#{date_label}" date}
end

Quando /^eu marco "([^"]*)"$/ do |field|
  When %{I check "#{field}"}
end

Quando /^eu desmarco "([^"]*)"$/ do |field|
  When %{I uncheck "#{field}"}
end

Quando /^eu escolho "([^"]*)"$/ do |field|
  When %{I choose "#{field}"}
end

Quando /^eu anexo o arquivo em "([^"]*)" a "([^"]*)"$/ do |path, field|
  When %{I attach the file "#{path}" to "#{field}"}
end

Então /^eu devo ver "([^"]*)"$/ do |text|
  Then %{I should see "#{text}"}
end

Então /^eu devo ver "([^"]*)" dentro de "([^"]*)"$/ do |text, selector|
  Then %{I should see "#{text}" within "#{selector}"}
end

Então /^eu devo ver \/([^\/]*)\/$/ do |regexp|
  Then %{I should see /#{regexp}/}
end

Então /^eu devo ver \/([^\/]*)\/ dentro de "([^"]*)"$/ do |regexp, selector|
  Then %{I should see /#{regexp}/ within "#{selector}"}
end

Então /^eu não devo ver "([^"]*)"$/ do |text|
  Then %{I should not see "#{text}"}
end

Então /^eu não devo ver na listagem "([^"]*)"$/ do |text|
  Then %{I should not see "#{text}" within ".dados"}
end

Então /^eu não devo ver "([^"]*)" dentro de "([^"]*)"$/ do |text, selector|
  Then %{I should not see "#{text}" within "#{selector}"}
end

Então /^eu não devo ver \/([^\/]*)\/$/ do |regexp|
  Then %{I should not see /#{regexp}/}
end

Então /^eu não devo ver \/([^\/]*)\/ dentro de "([^"]*)"$/ do |regexp, selector|
  Then %{I should not see /#{regexp}/ within "#{selector}"}
end

Então /^o campo "([^"]*)" deve conter "([^"]*)"$/ do |field, value|
  Then %{the "#{field}" field should contain "#{value}"}
end

Então /^o campo "([^"]*)" não deve conter "([^"]*)"$/ do |field, value|
  Then %{the "#{field}" field should not contain "#{value}"}
end

Então /^o checkbox "([^"]*)" deve estar marcado$/ do |label|
  Then %{the "#{label}" checkbox should be checked}
end

Então /^o checkbox "([^"]*)" não deve estar marcado$/ do |label|
  Then %{the "#{label}" checkbox should not be checked}
end

Então /^eu devo estar na (.+)$/ do |page_name|
  Then %{I should be on #{page_name}}
end

Então /^mostre-me a página$/ do
  Then %{show me the page}
end

Então /^eu devo ver o alert do valida campos e clico no ok/ do
  Then %{I should see "Preencha os campos indicados."}
  When %{I press "OK"}
end

Então /^eu devo ver o alert "([^"]*)" e clico no ok/ do |msg_alert|
  Then %{I should see "#{msg_alert}"}
  When %{I press "OK"}
end

Então /^eu devo ver o alert do confirmar exclusão e clico no ok/ do
  Then %{I should see "Confirma exclusão?"}
  When %{I press "OK"}
end

Então /^eu devo ver o alert do confirmar e clico no ok/ do
  When %{I press "OK"}
end

Quando /^eu espero (\d+) segundos$/ do |segundos|
  sleep segundos.to_i
end

Quando /^eu espero o campo "([^"]*)" ficar habilitado$/ do |field|
  field = find_field(field)
  1.upto(100) do
    break if (field[:disabled] == "false")
    sleep 0.1
  end
  field[:disabled].should == "false"
end

Quando /^eu saio do campo "([^"]*)"$/ do |field|
  field = find_field(field)
  page.execute_script("$('##{field[:id]}').blur()")
end

Então /^o campo "([^"]*)" deve ter "([^"]*)" selecionado$/ do |field, value|
  field = find_field(field)
  option = field.find(:xpath, "//option[contains(text(), '#{value}')]")
  value=option.value
  Então %{o campo "#{field[:id]}" deve conter "#{value}"}
end

Dado /^que exista o estabelecimento "([^"]*)"$/ do |nome|
   insert :estabelecimento do
     nome nome
     empresa :id => 1
   end
end

Dado /^que exista a área organizacional "([^"]*)", filha de "([^"]*)"$/ do |nome_area, nome_area_mae|
   insert :areaorganizacional do
     nome nome_area
     empresa :id => 1
     areamae :areaorganizacional, :nome => nome_area_mae
   end
end

Dado /^que exista o cargo "([^"]*)" na área organizacional "([^"]*)"$/ do |nome_cargo, nome_area|
   insert :cargo do
     nome nome_cargo
     nomemercado nome_cargo
     empresa :id => 1
   end

   insert :cargo_areaorganizacional, :sem_id => true do
     cargo :nome => nome_cargo
     areasorganizacionais :areaorganizacional, :nome => nome_area
   end
end

Dado /^que todos os papeis estejam permitidos$/ do
   exec_sql "update parametrosdosistema set modulos = encode(cast(array_to_string(array(select id from papel order by id), ',') as bytea), 'base64');"
end

def get_field field
  label = all(:xpath, "//label[contains(text(), '#{field}')]").select{|e| e.text.match("^\s*#{field}\:?")}.first
  field = label[:for] unless label.nil?
  field
end